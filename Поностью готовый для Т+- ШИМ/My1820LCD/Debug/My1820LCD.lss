
My1820LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f2e  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004e3  00000000  00000000  000017ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008f9  00000000  00000000  00001cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  000025a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fe  00000000  00000000  00002794  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d56  00000000  00000000  00002a92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  000037e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	fb d0       	rcall	.+502    	; 0x22a <main>
  34:	4d c3       	rjmp	.+1690   	; 0x6d0 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <dt_testdevice>:
﻿#include "DS18B20.h"

//функция определения датчика на шине
char dt_testdevice(void) //dt - digital termomether | определим, есть ли устройство на шине
{
	char stektemp=SREG;// сохраним значение стека
  38:	9f b7       	in	r25, 0x3f	; 63
	cli(); //запрещаем прерывание
  3a:	f8 94       	cli
	char dt;
	DDRTEMP |= 1<<BITTEMP; //притягиваем шину
  3c:	b8 9a       	sbi	0x17, 0	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  3e:	e9 ec       	ldi	r30, 0xC9	; 201
  40:	f3 e0       	ldi	r31, 0x03	; 3
  42:	31 97       	sbiw	r30, 0x01	; 1
  44:	f1 f7       	brne	.-4      	; 0x42 <__SREG__+0x3>
  46:	00 c0       	rjmp	.+0      	; 0x48 <__SREG__+0x9>
  48:	00 00       	nop
	_delay_us(485); //задержка как минимум на 480 микросекунд
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
  4a:	b8 98       	cbi	0x17, 0	; 23
  4c:	fd ea       	ldi	r31, 0xAD	; 173
  4e:	fa 95       	dec	r31
  50:	f1 f7       	brne	.-4      	; 0x4e <__SREG__+0xf>
  52:	00 00       	nop
	_delay_us(65); //задержка как максимум на 60 микросекунд
	if ((PINTEMP & (1<<BITTEMP))==0)//проверяем, ответит ли устройство
  54:	86 b3       	in	r24, 0x16	; 22
	{
		dt=1;//устройство есть
	} 
	else dt=0;//устройства нет
	SREG = stektemp;// вернем значение стека
  56:	9f bf       	out	0x3f, r25	; 63
  58:	e7 e4       	ldi	r30, 0x47	; 71
  5a:	f3 e0       	ldi	r31, 0x03	; 3
  5c:	31 97       	sbiw	r30, 0x01	; 1
  5e:	f1 f7       	brne	.-4      	; 0x5c <__SREG__+0x1d>
  60:	00 c0       	rjmp	.+0      	; 0x62 <__SREG__+0x23>
  62:	00 00       	nop
	_delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
	return dt; //вернем результат
  64:	80 95       	com	r24
}
  66:	81 70       	andi	r24, 0x01	; 1
  68:	08 95       	ret

0000006a <dt_sendbit>:


//функция записи бита на устройство
void dt_sendbit(char bt)
{
	char stektemp=SREG;// сохраним значение стека
  6a:	9f b7       	in	r25, 0x3f	; 63
	cli(); //запрещаем прерывание
  6c:	f8 94       	cli
	DDRTEMP |= 1<<BITTEMP; //притягиваем шину
  6e:	b8 9a       	sbi	0x17, 0	; 23
  70:	25 e0       	ldi	r18, 0x05	; 5
  72:	2a 95       	dec	r18
  74:	f1 f7       	brne	.-4      	; 0x72 <dt_sendbit+0x8>
  76:	00 00       	nop
	_delay_us(2); //задержка как минимум на 2 микросекунды
	if(bt)
  78:	81 11       	cpse	r24, r1
		DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
  7a:	b8 98       	cbi	0x17, 0	; 23
  7c:	8d ea       	ldi	r24, 0xAD	; 173
  7e:	8a 95       	dec	r24
  80:	f1 f7       	brne	.-4      	; 0x7e <dt_sendbit+0x14>
  82:	00 00       	nop
	_delay_us(65); //задержка как минимум на 60 микросекунд
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
  84:	b8 98       	cbi	0x17, 0	; 23
	SREG = stektemp;// вернем значение стека
  86:	9f bf       	out	0x3f, r25	; 63
  88:	08 95       	ret

0000008a <dt_sendbyte>:
}
//функция записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
  8a:	ef 92       	push	r14
  8c:	ff 92       	push	r15
  8e:	0f 93       	push	r16
  90:	1f 93       	push	r17
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	c0 e0       	ldi	r28, 0x00	; 0
  98:	d0 e0       	ldi	r29, 0x00	; 0
	char i;		
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
	{
		if((bt & (1<<i)) == 1<<i)//посылаем 1
  9a:	ee 24       	eor	r14, r14
  9c:	e3 94       	inc	r14
  9e:	f1 2c       	mov	r15, r1
  a0:	08 2f       	mov	r16, r24
  a2:	10 e0       	ldi	r17, 0x00	; 0
  a4:	97 01       	movw	r18, r14
  a6:	0c 2e       	mov	r0, r28
  a8:	02 c0       	rjmp	.+4      	; 0xae <dt_sendbyte+0x24>
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	0a 94       	dec	r0
  b0:	e2 f7       	brpl	.-8      	; 0xaa <dt_sendbyte+0x20>
  b2:	a8 01       	movw	r20, r16
  b4:	42 23       	and	r20, r18
  b6:	53 23       	and	r21, r19
  b8:	24 17       	cp	r18, r20
  ba:	35 07       	cpc	r19, r21
  bc:	19 f4       	brne	.+6      	; 0xc4 <dt_sendbyte+0x3a>
			dt_sendbit(1);
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	d4 df       	rcall	.-88     	; 0x6a <dt_sendbit>
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <dt_sendbyte+0x3e>
		else //посылаем 0
			dt_sendbit(0);
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	d1 df       	rcall	.-94     	; 0x6a <dt_sendbit>
  c8:	21 96       	adiw	r28, 0x01	; 1
}
//функция записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
	char i;		
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
  ca:	c8 30       	cpi	r28, 0x08	; 8
  cc:	d1 05       	cpc	r29, r1
  ce:	51 f7       	brne	.-44     	; 0xa4 <dt_sendbyte+0x1a>
		if((bt & (1<<i)) == 1<<i)//посылаем 1
			dt_sendbit(1);
		else //посылаем 0
			dt_sendbit(0);
	}	
}
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	1f 91       	pop	r17
  d6:	0f 91       	pop	r16
  d8:	ff 90       	pop	r15
  da:	ef 90       	pop	r14
  dc:	08 95       	ret

000000de <dt_readbit>:

//функция чтения бита с устройства
char dt_readbit(void)
{
	char stektemp=SREG;// сохраним значение стека
  de:	9f b7       	in	r25, 0x3f	; 63
	cli(); //запрещаем прерывание
  e0:	f8 94       	cli
	char bt; //переменная хранения бита
	DDRTEMP |= 1<<BITTEMP; //притягиваем шину
  e2:	b8 9a       	sbi	0x17, 0	; 23
  e4:	25 e0       	ldi	r18, 0x05	; 5
  e6:	2a 95       	dec	r18
  e8:	f1 f7       	brne	.-4      	; 0xe6 <dt_readbit+0x8>
  ea:	00 00       	nop
	_delay_us(2); //задержка как минимум на 2 микросекунды
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
  ec:	b8 98       	cbi	0x17, 0	; 23
  ee:	82 e2       	ldi	r24, 0x22	; 34
  f0:	8a 95       	dec	r24
  f2:	f1 f7       	brne	.-4      	; 0xf0 <dt_readbit+0x12>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <dt_readbit+0x18>
	_delay_us(13);
	bt = (PINTEMP & (1<<BITTEMP))>>BITTEMP; //читаем бит
  f6:	86 b3       	in	r24, 0x16	; 22
  f8:	28 e7       	ldi	r18, 0x78	; 120
  fa:	2a 95       	dec	r18
  fc:	f1 f7       	brne	.-4      	; 0xfa <dt_readbit+0x1c>
	_delay_us(45);
	SREG = stektemp;// вернем значение стека
  fe:	9f bf       	out	0x3f, r25	; 63
	return bt; //вернем результат
}
 100:	81 70       	andi	r24, 0x01	; 1
 102:	08 95       	ret

00000104 <dt_readbyte>:

//функция чтения байта с устройства
unsigned char dt_readbyte(void)
{
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	c0 e0       	ldi	r28, 0x00	; 0
 10c:	d0 e0       	ldi	r29, 0x00	; 0
	char c=0;
 10e:	10 e0       	ldi	r17, 0x00	; 0
	char i;
	for(i=0;i<8;i++)
		c|=dt_readbit()<<i; //читаем бит
 110:	e6 df       	rcall	.-52     	; 0xde <dt_readbit>
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0c 2e       	mov	r0, r28
 116:	02 c0       	rjmp	.+4      	; 0x11c <dt_readbyte+0x18>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <dt_readbyte+0x14>
 120:	18 2b       	or	r17, r24
 122:	21 96       	adiw	r28, 0x01	; 1
//функция чтения байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
	char i;
	for(i=0;i<8;i++)
 124:	c8 30       	cpi	r28, 0x08	; 8
 126:	d1 05       	cpc	r29, r1
 128:	99 f7       	brne	.-26     	; 0x110 <dt_readbyte+0xc>
		c|=dt_readbit()<<i; //читаем бит
	return c;
}
 12a:	81 2f       	mov	r24, r17
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	1f 91       	pop	r17
 132:	08 95       	ret

00000134 <dt_check>:

//функция преобразования показаний датчика в температуру
int dt_check(void)
{
 134:	cf 93       	push	r28
	unsigned int ttm=0;
	unsigned int ttczm=0;
	unsigned int ttdrzm=0;
	unsigned int ttz=0;

	if(dt_testdevice()==1) //если устройство нашлось
 136:	80 df       	rcall	.-256    	; 0x38 <dt_testdevice>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	d9 f4       	brne	.+54     	; 0x172 <dt_check+0x3e>
	{
		dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
 13c:	8c ec       	ldi	r24, 0xCC	; 204
 13e:	a5 df       	rcall	.-182    	; 0x8a <dt_sendbyte>
		dt_sendbyte(T_CONVERT); //измеряем температуру
 140:	84 e4       	ldi	r24, 0x44	; 68
 142:	a3 df       	rcall	.-186    	; 0x8a <dt_sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	49 e6       	ldi	r20, 0x69	; 105
 148:	58 e1       	ldi	r21, 0x18	; 24
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	40 40       	sbci	r20, 0x00	; 0
 14e:	50 40       	sbci	r21, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <dt_check+0x16>
 152:	00 c0       	rjmp	.+0      	; 0x154 <dt_check+0x20>
 154:	00 00       	nop
		_delay_ms(1000); //в 12битном режиме преобразования - 750 милисекунд
		dt_testdevice(); //снова используем  те же манипуляции с шиной что и при проверке ее присутствия
 156:	70 df       	rcall	.-288    	; 0x38 <dt_testdevice>
		dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
 158:	8c ec       	ldi	r24, 0xCC	; 204
 15a:	97 df       	rcall	.-210    	; 0x8a <dt_sendbyte>
		dt_sendbyte(READ_DATA); //даем команду на чтение данных с устройства
 15c:	8e eb       	ldi	r24, 0xBE	; 190
 15e:	95 df       	rcall	.-214    	; 0x8a <dt_sendbyte>
		bt = dt_readbyte(); //читаем младший бит
 160:	d1 df       	rcall	.-94     	; 0x104 <dt_readbyte>
 162:	c8 2f       	mov	r28, r24
		tto = dt_readbyte(); //читаем старший бит MS
 164:	cf df       	rcall	.-98     	; 0x104 <dt_readbyte>
		tto = (tto<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
 166:	2c 2f       	mov	r18, r28
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	a9 01       	movw	r20, r18
 16c:	58 2b       	or	r21, r24
 16e:	ca 01       	movw	r24, r20
 170:	02 c0       	rjmp	.+4      	; 0x176 <dt_check+0x42>

//функция преобразования показаний датчика в температуру
int dt_check(void)
{
	unsigned char bt;//переменная для считывания байта
	unsigned int tto=0;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
	return ttm;
	return ttczm;
	return ttdrzm;
	return ttz;
	
}
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <read_znak>:
char read_znak(unsigned int ttz)
{
	int tz=ttz;
	int znak=0;
	//char gz = 1;
	tz = (tz>>15);
 17a:	29 2f       	mov	r18, r25
 17c:	22 0f       	add	r18, r18
 17e:	22 0b       	sbc	r18, r18
 180:	32 2f       	mov	r19, r18
	//tz &=~0000011111111111;
	//if (tz<0xf800)		// если последние 5 бит старшего байта = 11111
		(znak=1);	//минусовая
	else 
		(znak = 0);	//плюсовая
	return znak;
 182:	26 7b       	andi	r18, 0xB6	; 182
 184:	3d 76       	andi	r19, 0x6D	; 109
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	23 2b       	or	r18, r19
 18a:	09 f0       	breq	.+2      	; 0x18e <read_znak+0x14>
 18c:	80 e0       	ldi	r24, 0x00	; 0
}
 18e:	08 95       	ret

00000190 <converttemp>:

//преобразование температуры в единицы
char converttemp (unsigned int tto)
{
	char to = tto>>4;//сдвиг и отсечение части старшего байта
	return to;
 190:	92 95       	swap	r25
 192:	82 95       	swap	r24
 194:	8f 70       	andi	r24, 0x0F	; 15
 196:	89 27       	eor	r24, r25
 198:	9f 70       	andi	r25, 0x0F	; 15
 19a:	89 27       	eor	r24, r25
		
}
 19c:	08 95       	ret

0000019e <converttempm>:
char converttempm (unsigned int ttm)
{ttm &=~1111111111110000; //выделяем младший байт (выставляем все нули кроме дробной части - первые 4 бита это дробь) 
	char tm = ttm;
return tm; // tm - это и есть дробная часть
}
 19e:	8f 78       	andi	r24, 0x8F	; 143
 1a0:	08 95       	ret

000001a2 <converttempczm>:
char converttempczm(unsigned int ttczm)
{
	int zm=ttczm;
	int czm;
	zm=~zm;
	zm++;
 1a2:	91 95       	neg	r25
 1a4:	81 95       	neg	r24
 1a6:	91 09       	sbc	r25, r1
	czm = zm;
	czm = czm>>4;
 1a8:	95 95       	asr	r25
 1aa:	87 95       	ror	r24
 1ac:	95 95       	asr	r25
 1ae:	87 95       	ror	r24
 1b0:	95 95       	asr	r25
 1b2:	87 95       	ror	r24
 1b4:	95 95       	asr	r25
 1b6:	87 95       	ror	r24
	czm &=~1111111100000000;
	return czm;
}
 1b8:	08 95       	ret

000001ba <converttempdrzm>:
char converttempdrzm(unsigned int ttdrzm)
{
	int zm=ttdrzm;
	int drzm;
	zm=~zm;
	zm++;
 1ba:	91 95       	neg	r25
 1bc:	81 95       	neg	r24
 1be:	91 09       	sbc	r25, r1
	drzm = zm;
	drzm &=~1111111111110000;
	return drzm;
 1c0:	8f 78       	andi	r24, 0x8F	; 143
 1c2:	08 95       	ret

000001c4 <sendhalfbyte>:
 1c4:	93 9a       	sbi	0x12, 3	; 18
 1c6:	95 e8       	ldi	r25, 0x85	; 133
 1c8:	9a 95       	dec	r25
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <sendhalfbyte+0x4>
 1cc:	00 00       	nop
 1ce:	92 b3       	in	r25, 0x12	; 18
 1d0:	9f 70       	andi	r25, 0x0F	; 15
 1d2:	92 bb       	out	0x12, r25	; 18
 1d4:	92 b3       	in	r25, 0x12	; 18
 1d6:	82 95       	swap	r24
 1d8:	80 7f       	andi	r24, 0xF0	; 240
 1da:	89 2b       	or	r24, r25
 1dc:	82 bb       	out	0x12, r24	; 18
 1de:	93 98       	cbi	0x12, 3	; 18
 1e0:	85 e8       	ldi	r24, 0x85	; 133
 1e2:	8a 95       	dec	r24
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <sendhalfbyte+0x1e>
 1e6:	00 00       	nop
 1e8:	08 95       	ret

000001ea <sendbyte>:
 1ea:	cf 93       	push	r28
 1ec:	c8 2f       	mov	r28, r24
 1ee:	61 11       	cpse	r22, r1
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <sendbyte+0xc>
 1f2:	92 98       	cbi	0x12, 2	; 18
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <sendbyte+0xe>
 1f6:	92 9a       	sbi	0x12, 2	; 18
 1f8:	8c 2f       	mov	r24, r28
 1fa:	82 95       	swap	r24
 1fc:	8f 70       	andi	r24, 0x0F	; 15
 1fe:	e2 df       	rcall	.-60     	; 0x1c4 <sendhalfbyte>
 200:	8c 2f       	mov	r24, r28
 202:	e0 df       	rcall	.-64     	; 0x1c4 <sendhalfbyte>
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <clearlcd>:
	_delay_ms(1);
}
//----------------------------------------
void clearlcd(void)
{
	sendbyte(0b00000001, 0);
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	ee df       	rcall	.-36     	; 0x1ea <sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	87 eb       	ldi	r24, 0xB7	; 183
 210:	9b e0       	ldi	r25, 0x0B	; 11
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <clearlcd+0xa>
 216:	00 c0       	rjmp	.+0      	; 0x218 <clearlcd+0x10>
 218:	00 00       	nop
 21a:	08 95       	ret

0000021c <port_ini>:
//----------------------------------------
//unsigned char sec,min,hour,day,date,month,year;
//----------------------------------------
void port_ini(void)
{
	PORTD=0x00;
 21c:	12 ba       	out	0x12, r1	; 18
	DDRD=0xFF;
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	81 bb       	out	0x11, r24	; 17
	PORTB=0x00;
 222:	18 ba       	out	0x18, r1	; 24
	DDRB=0x08;
 224:	88 e0       	ldi	r24, 0x08	; 8
 226:	87 bb       	out	0x17, r24	; 23
 228:	08 95       	ret

0000022a <main>:
	unsigned int czm=0;		//переменая целого значения температуры при отриц
	unsigned int drzm=0;	//переменая дроби температуры при отриц
	unsigned int obchee=0;	//переменная всего числа
	unsigned int tmin=0;		//переменная которой присваивается общее и знак меняется на противоположный
	
	port_ini(); //Инициализируем порты
 22a:	f8 df       	rcall	.-16     	; 0x21c <port_ini>
	
	
	//LCD_ini();  //Инициализируем дисплей
	//clearlcd(); //Очистим дисплей
	//USART_Init (103); //9600
	init_PWM_timer();			//!!!
 22c:	bb d0       	rcall	.+374    	; 0x3a4 <init_PWM_timer>
	OCR2 = 0;					//!!!
 22e:	13 bc       	out	0x23, r1	; 35
				{
					OCR2=20;
				}
				else
				{
					OCR2=512/10+(tmin+40)*2.038;
 230:	c8 e2       	ldi	r28, 0x28	; 40
 232:	d0 e0       	ldi	r29, 0x00	; 0
					if (OCR2>=254) OCR2=20;
 234:	14 e1       	ldi	r17, 0x14	; 20
	OCR2 = 0;					//!!!
	tmin = 0;

	while(1)
	{	
		clearlcd();
 236:	e8 df       	rcall	.-48     	; 0x208 <clearlcd>
		znak = read_znak(dt_check()); //флаг знака. Если 0 отриц, если 1 полож
 238:	7d df       	rcall	.-262    	; 0x134 <dt_check>
 23a:	9f df       	rcall	.-194    	; 0x17a <read_znak>
		tmin=0;
		if (znak==1) 
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	09 f0       	breq	.+2      	; 0x242 <main+0x18>
 240:	56 c0       	rjmp	.+172    	; 0x2ee <main+0xc4>
		{	
			to = converttemp(dt_check());//измеряем температуру без долей
 242:	78 df       	rcall	.-272    	; 0x134 <dt_check>
 244:	a5 df       	rcall	.-182    	; 0x190 <converttemp>
 246:	08 2f       	mov	r16, r24
			tm = converttempm(dt_check());//измеряем температуру доли градуса
 248:	75 df       	rcall	.-278    	; 0x134 <dt_check>
 24a:	a9 df       	rcall	.-174    	; 0x19e <converttempm>
			obchee = (to*10+tm%10)/10;
 24c:	60 2f       	mov	r22, r16
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	9b 01       	movw	r18, r22
 252:	22 0f       	add	r18, r18
 254:	33 1f       	adc	r19, r19
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	66 0f       	add	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	f9 01       	movw	r30, r18
 264:	e6 0f       	add	r30, r22
 266:	f7 1f       	adc	r31, r23
 268:	48 2f       	mov	r20, r24
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	9a 01       	movw	r18, r20
 26e:	ad ec       	ldi	r26, 0xCD	; 205
 270:	bc ec       	ldi	r27, 0xCC	; 204
 272:	22 d2       	rcall	.+1092   	; 0x6b8 <__umulhisi3>
 274:	96 95       	lsr	r25
 276:	87 95       	ror	r24
 278:	96 95       	lsr	r25
 27a:	87 95       	ror	r24
 27c:	96 95       	lsr	r25
 27e:	87 95       	ror	r24
 280:	9c 01       	movw	r18, r24
 282:	22 0f       	add	r18, r18
 284:	33 1f       	adc	r19, r19
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	82 0f       	add	r24, r18
 294:	93 1f       	adc	r25, r19
 296:	9a 01       	movw	r18, r20
 298:	28 1b       	sub	r18, r24
 29a:	39 0b       	sbc	r19, r25
 29c:	2e 0f       	add	r18, r30
 29e:	3f 1f       	adc	r19, r31
 2a0:	0b d2       	rcall	.+1046   	; 0x6b8 <__umulhisi3>
 2a2:	7c 01       	movw	r14, r24
 2a4:	f6 94       	lsr	r15
 2a6:	e7 94       	ror	r14
 2a8:	f6 94       	lsr	r15
 2aa:	e7 94       	ror	r14
 2ac:	f6 94       	lsr	r15
 2ae:	e7 94       	ror	r14
			OCR2=51+(obchee+40)*2.038;
 2b0:	b7 01       	movw	r22, r14
 2b2:	68 5d       	subi	r22, 0xD8	; 216
 2b4:	7f 4f       	sbci	r23, 0xFF	; 255
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0d d1       	rcall	.+538    	; 0x4d6 <__floatunsisf>
 2bc:	28 e9       	ldi	r18, 0x98	; 152
 2be:	3e e6       	ldi	r19, 0x6E	; 110
 2c0:	42 e0       	ldi	r20, 0x02	; 2
 2c2:	50 e4       	ldi	r21, 0x40	; 64
 2c4:	96 d1       	rcall	.+812    	; 0x5f2 <__mulsf3>
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	4c e4       	ldi	r20, 0x4C	; 76
 2cc:	52 e4       	ldi	r21, 0x42	; 66
 2ce:	73 d0       	rcall	.+230    	; 0x3b6 <__addsf3>
 2d0:	d6 d0       	rcall	.+428    	; 0x47e <__fixunssfsi>
 2d2:	63 bd       	out	0x23, r22	; 35
				if (obchee>=60)
 2d4:	2c e3       	ldi	r18, 0x3C	; 60
 2d6:	e2 16       	cp	r14, r18
 2d8:	f1 04       	cpc	r15, r1
 2da:	10 f0       	brcs	.+4      	; 0x2e0 <main+0xb6>
				{
					OCR2=20;
 2dc:	13 bd       	out	0x23, r17	; 35
 2de:	58 c0       	rjmp	.+176    	; 0x390 <main+0x166>
				}
				else
				{
					OCR2=51+(obchee+40)*2.038;
 2e0:	63 bd       	out	0x23, r22	; 35
					if (OCR2>=254) OCR2=20;
 2e2:	83 b5       	in	r24, 0x23	; 35
 2e4:	8e 3f       	cpi	r24, 0xFE	; 254
 2e6:	08 f4       	brcc	.+2      	; 0x2ea <main+0xc0>
 2e8:	53 c0       	rjmp	.+166    	; 0x390 <main+0x166>
 2ea:	13 bd       	out	0x23, r17	; 35
 2ec:	51 c0       	rjmp	.+162    	; 0x390 <main+0x166>
				}
		}
		else		
		{
			czm = converttempczm(dt_check());//измеряем температуру без долей при отриц
 2ee:	22 df       	rcall	.-444    	; 0x134 <dt_check>
 2f0:	58 df       	rcall	.-336    	; 0x1a2 <converttempczm>
 2f2:	08 2f       	mov	r16, r24
			drzm = converttempdrzm(dt_check());//измеряем температуру доли градуса
 2f4:	1f df       	rcall	.-450    	; 0x134 <dt_check>
 2f6:	61 df       	rcall	.-318    	; 0x1ba <converttempdrzm>
 			obchee = (czm*10+drzm%10)/10;
 2f8:	60 2f       	mov	r22, r16
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	9b 01       	movw	r18, r22
 2fe:	22 0f       	add	r18, r18
 300:	33 1f       	adc	r19, r19
 302:	66 0f       	add	r22, r22
 304:	77 1f       	adc	r23, r23
 306:	66 0f       	add	r22, r22
 308:	77 1f       	adc	r23, r23
 30a:	66 0f       	add	r22, r22
 30c:	77 1f       	adc	r23, r23
 30e:	f9 01       	movw	r30, r18
 310:	e6 0f       	add	r30, r22
 312:	f7 1f       	adc	r31, r23
 314:	48 2f       	mov	r20, r24
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	9a 01       	movw	r18, r20
 31a:	ad ec       	ldi	r26, 0xCD	; 205
 31c:	bc ec       	ldi	r27, 0xCC	; 204
 31e:	cc d1       	rcall	.+920    	; 0x6b8 <__umulhisi3>
 320:	96 95       	lsr	r25
 322:	87 95       	ror	r24
 324:	96 95       	lsr	r25
 326:	87 95       	ror	r24
 328:	96 95       	lsr	r25
 32a:	87 95       	ror	r24
 32c:	9c 01       	movw	r18, r24
 32e:	22 0f       	add	r18, r18
 330:	33 1f       	adc	r19, r19
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	82 0f       	add	r24, r18
 340:	93 1f       	adc	r25, r19
 342:	9a 01       	movw	r18, r20
 344:	28 1b       	sub	r18, r24
 346:	39 0b       	sbc	r19, r25
 348:	2e 0f       	add	r18, r30
 34a:	3f 1f       	adc	r19, r31
 34c:	b5 d1       	rcall	.+874    	; 0x6b8 <__umulhisi3>
 34e:	96 95       	lsr	r25
 350:	87 95       	ror	r24
 352:	96 95       	lsr	r25
 354:	87 95       	ror	r24
 356:	96 95       	lsr	r25
 358:	87 95       	ror	r24
			tmin=-obchee; 
				if (obchee>40)
 35a:	89 32       	cpi	r24, 0x29	; 41
 35c:	91 05       	cpc	r25, r1
 35e:	10 f0       	brcs	.+4      	; 0x364 <main+0x13a>
				{
					OCR2=20;
 360:	13 bd       	out	0x23, r17	; 35
 362:	16 c0       	rjmp	.+44     	; 0x390 <main+0x166>
				}
				else
				{
					OCR2=512/10+(tmin+40)*2.038;
 364:	be 01       	movw	r22, r28
 366:	68 1b       	sub	r22, r24
 368:	79 0b       	sbc	r23, r25
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	b3 d0       	rcall	.+358    	; 0x4d6 <__floatunsisf>
 370:	28 e9       	ldi	r18, 0x98	; 152
 372:	3e e6       	ldi	r19, 0x6E	; 110
 374:	42 e0       	ldi	r20, 0x02	; 2
 376:	50 e4       	ldi	r21, 0x40	; 64
 378:	3c d1       	rcall	.+632    	; 0x5f2 <__mulsf3>
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	4c e4       	ldi	r20, 0x4C	; 76
 380:	52 e4       	ldi	r21, 0x42	; 66
 382:	19 d0       	rcall	.+50     	; 0x3b6 <__addsf3>
 384:	7c d0       	rcall	.+248    	; 0x47e <__fixunssfsi>
 386:	63 bd       	out	0x23, r22	; 35
					if (OCR2>=254) OCR2=20;
 388:	83 b5       	in	r24, 0x23	; 35
 38a:	8e 3f       	cpi	r24, 0xFE	; 254
 38c:	08 f0       	brcs	.+2      	; 0x390 <main+0x166>
 38e:	13 bd       	out	0x23, r17	; 35
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	99 e6       	ldi	r25, 0x69	; 105
 394:	28 e1       	ldi	r18, 0x18	; 24
 396:	81 50       	subi	r24, 0x01	; 1
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	20 40       	sbci	r18, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <main+0x16c>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <main+0x176>
 3a0:	00 00       	nop
 3a2:	49 cf       	rjmp	.-366    	; 0x236 <main+0xc>

000003a4 <init_PWM_timer>:
﻿#include "PWM.h"

void init_PWM_timer(void)
{
	ASSR=0x00;
 3a4:	12 bc       	out	0x22, r1	; 34
	TCCR2=0b01101110; //Fast PWM, Clear OC2 on Compare Match, clkT2S/256 (From prescaler) (реальная частота получится 8мгц/256 = 31250 гц)
 3a6:	8e e6       	ldi	r24, 0x6E	; 110
 3a8:	85 bd       	out	0x25, r24	; 37
	TCNT2=0x00; // Timer Value = 0
 3aa:	14 bc       	out	0x24, r1	; 36
	OCR2=0x00; //Output Compare Register = 0 - в нашем случае это скважность шим (0 - это 0, а FF - 100 %)
 3ac:	13 bc       	out	0x23, r1	; 35
	TIMSK|=0x00;//
 3ae:	89 b7       	in	r24, 0x39	; 57
 3b0:	89 bf       	out	0x39, r24	; 57
 3b2:	08 95       	ret

000003b4 <__subsf3>:
 3b4:	50 58       	subi	r21, 0x80	; 128

000003b6 <__addsf3>:
 3b6:	bb 27       	eor	r27, r27
 3b8:	aa 27       	eor	r26, r26
 3ba:	0e d0       	rcall	.+28     	; 0x3d8 <__addsf3x>
 3bc:	e0 c0       	rjmp	.+448    	; 0x57e <__fp_round>
 3be:	d1 d0       	rcall	.+418    	; 0x562 <__fp_pscA>
 3c0:	30 f0       	brcs	.+12     	; 0x3ce <__addsf3+0x18>
 3c2:	d6 d0       	rcall	.+428    	; 0x570 <__fp_pscB>
 3c4:	20 f0       	brcs	.+8      	; 0x3ce <__addsf3+0x18>
 3c6:	31 f4       	brne	.+12     	; 0x3d4 <__addsf3+0x1e>
 3c8:	9f 3f       	cpi	r25, 0xFF	; 255
 3ca:	11 f4       	brne	.+4      	; 0x3d0 <__addsf3+0x1a>
 3cc:	1e f4       	brtc	.+6      	; 0x3d4 <__addsf3+0x1e>
 3ce:	c6 c0       	rjmp	.+396    	; 0x55c <__fp_nan>
 3d0:	0e f4       	brtc	.+2      	; 0x3d4 <__addsf3+0x1e>
 3d2:	e0 95       	com	r30
 3d4:	e7 fb       	bst	r30, 7
 3d6:	bc c0       	rjmp	.+376    	; 0x550 <__fp_inf>

000003d8 <__addsf3x>:
 3d8:	e9 2f       	mov	r30, r25
 3da:	e2 d0       	rcall	.+452    	; 0x5a0 <__fp_split3>
 3dc:	80 f3       	brcs	.-32     	; 0x3be <__addsf3+0x8>
 3de:	ba 17       	cp	r27, r26
 3e0:	62 07       	cpc	r22, r18
 3e2:	73 07       	cpc	r23, r19
 3e4:	84 07       	cpc	r24, r20
 3e6:	95 07       	cpc	r25, r21
 3e8:	18 f0       	brcs	.+6      	; 0x3f0 <__addsf3x+0x18>
 3ea:	71 f4       	brne	.+28     	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
 3ec:	9e f5       	brtc	.+102    	; 0x454 <__FUSE_REGION_LENGTH__+0x54>
 3ee:	fa c0       	rjmp	.+500    	; 0x5e4 <__fp_zero>
 3f0:	0e f4       	brtc	.+2      	; 0x3f4 <__addsf3x+0x1c>
 3f2:	e0 95       	com	r30
 3f4:	0b 2e       	mov	r0, r27
 3f6:	ba 2f       	mov	r27, r26
 3f8:	a0 2d       	mov	r26, r0
 3fa:	0b 01       	movw	r0, r22
 3fc:	b9 01       	movw	r22, r18
 3fe:	90 01       	movw	r18, r0
 400:	0c 01       	movw	r0, r24
 402:	ca 01       	movw	r24, r20
 404:	a0 01       	movw	r20, r0
 406:	11 24       	eor	r1, r1
 408:	ff 27       	eor	r31, r31
 40a:	59 1b       	sub	r21, r25
 40c:	99 f0       	breq	.+38     	; 0x434 <__FUSE_REGION_LENGTH__+0x34>
 40e:	59 3f       	cpi	r21, 0xF9	; 249
 410:	50 f4       	brcc	.+20     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 412:	50 3e       	cpi	r21, 0xE0	; 224
 414:	68 f1       	brcs	.+90     	; 0x470 <__stack+0x11>
 416:	1a 16       	cp	r1, r26
 418:	f0 40       	sbci	r31, 0x00	; 0
 41a:	a2 2f       	mov	r26, r18
 41c:	23 2f       	mov	r18, r19
 41e:	34 2f       	mov	r19, r20
 420:	44 27       	eor	r20, r20
 422:	58 5f       	subi	r21, 0xF8	; 248
 424:	f3 cf       	rjmp	.-26     	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 426:	46 95       	lsr	r20
 428:	37 95       	ror	r19
 42a:	27 95       	ror	r18
 42c:	a7 95       	ror	r26
 42e:	f0 40       	sbci	r31, 0x00	; 0
 430:	53 95       	inc	r21
 432:	c9 f7       	brne	.-14     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 434:	7e f4       	brtc	.+30     	; 0x454 <__FUSE_REGION_LENGTH__+0x54>
 436:	1f 16       	cp	r1, r31
 438:	ba 0b       	sbc	r27, r26
 43a:	62 0b       	sbc	r22, r18
 43c:	73 0b       	sbc	r23, r19
 43e:	84 0b       	sbc	r24, r20
 440:	ba f0       	brmi	.+46     	; 0x470 <__stack+0x11>
 442:	91 50       	subi	r25, 0x01	; 1
 444:	a1 f0       	breq	.+40     	; 0x46e <__stack+0xf>
 446:	ff 0f       	add	r31, r31
 448:	bb 1f       	adc	r27, r27
 44a:	66 1f       	adc	r22, r22
 44c:	77 1f       	adc	r23, r23
 44e:	88 1f       	adc	r24, r24
 450:	c2 f7       	brpl	.-16     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
 452:	0e c0       	rjmp	.+28     	; 0x470 <__stack+0x11>
 454:	ba 0f       	add	r27, r26
 456:	62 1f       	adc	r22, r18
 458:	73 1f       	adc	r23, r19
 45a:	84 1f       	adc	r24, r20
 45c:	48 f4       	brcc	.+18     	; 0x470 <__stack+0x11>
 45e:	87 95       	ror	r24
 460:	77 95       	ror	r23
 462:	67 95       	ror	r22
 464:	b7 95       	ror	r27
 466:	f7 95       	ror	r31
 468:	9e 3f       	cpi	r25, 0xFE	; 254
 46a:	08 f0       	brcs	.+2      	; 0x46e <__stack+0xf>
 46c:	b3 cf       	rjmp	.-154    	; 0x3d4 <__addsf3+0x1e>
 46e:	93 95       	inc	r25
 470:	88 0f       	add	r24, r24
 472:	08 f0       	brcs	.+2      	; 0x476 <__stack+0x17>
 474:	99 27       	eor	r25, r25
 476:	ee 0f       	add	r30, r30
 478:	97 95       	ror	r25
 47a:	87 95       	ror	r24
 47c:	08 95       	ret

0000047e <__fixunssfsi>:
 47e:	98 d0       	rcall	.+304    	; 0x5b0 <__fp_splitA>
 480:	88 f0       	brcs	.+34     	; 0x4a4 <__fixunssfsi+0x26>
 482:	9f 57       	subi	r25, 0x7F	; 127
 484:	90 f0       	brcs	.+36     	; 0x4aa <__fixunssfsi+0x2c>
 486:	b9 2f       	mov	r27, r25
 488:	99 27       	eor	r25, r25
 48a:	b7 51       	subi	r27, 0x17	; 23
 48c:	a0 f0       	brcs	.+40     	; 0x4b6 <__fixunssfsi+0x38>
 48e:	d1 f0       	breq	.+52     	; 0x4c4 <__fixunssfsi+0x46>
 490:	66 0f       	add	r22, r22
 492:	77 1f       	adc	r23, r23
 494:	88 1f       	adc	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	1a f0       	brmi	.+6      	; 0x4a0 <__fixunssfsi+0x22>
 49a:	ba 95       	dec	r27
 49c:	c9 f7       	brne	.-14     	; 0x490 <__fixunssfsi+0x12>
 49e:	12 c0       	rjmp	.+36     	; 0x4c4 <__fixunssfsi+0x46>
 4a0:	b1 30       	cpi	r27, 0x01	; 1
 4a2:	81 f0       	breq	.+32     	; 0x4c4 <__fixunssfsi+0x46>
 4a4:	9f d0       	rcall	.+318    	; 0x5e4 <__fp_zero>
 4a6:	b1 e0       	ldi	r27, 0x01	; 1
 4a8:	08 95       	ret
 4aa:	9c c0       	rjmp	.+312    	; 0x5e4 <__fp_zero>
 4ac:	67 2f       	mov	r22, r23
 4ae:	78 2f       	mov	r23, r24
 4b0:	88 27       	eor	r24, r24
 4b2:	b8 5f       	subi	r27, 0xF8	; 248
 4b4:	39 f0       	breq	.+14     	; 0x4c4 <__fixunssfsi+0x46>
 4b6:	b9 3f       	cpi	r27, 0xF9	; 249
 4b8:	cc f3       	brlt	.-14     	; 0x4ac <__fixunssfsi+0x2e>
 4ba:	86 95       	lsr	r24
 4bc:	77 95       	ror	r23
 4be:	67 95       	ror	r22
 4c0:	b3 95       	inc	r27
 4c2:	d9 f7       	brne	.-10     	; 0x4ba <__fixunssfsi+0x3c>
 4c4:	3e f4       	brtc	.+14     	; 0x4d4 <__fixunssfsi+0x56>
 4c6:	90 95       	com	r25
 4c8:	80 95       	com	r24
 4ca:	70 95       	com	r23
 4cc:	61 95       	neg	r22
 4ce:	7f 4f       	sbci	r23, 0xFF	; 255
 4d0:	8f 4f       	sbci	r24, 0xFF	; 255
 4d2:	9f 4f       	sbci	r25, 0xFF	; 255
 4d4:	08 95       	ret

000004d6 <__floatunsisf>:
 4d6:	e8 94       	clt
 4d8:	09 c0       	rjmp	.+18     	; 0x4ec <__floatsisf+0x12>

000004da <__floatsisf>:
 4da:	97 fb       	bst	r25, 7
 4dc:	3e f4       	brtc	.+14     	; 0x4ec <__floatsisf+0x12>
 4de:	90 95       	com	r25
 4e0:	80 95       	com	r24
 4e2:	70 95       	com	r23
 4e4:	61 95       	neg	r22
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255
 4e8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ea:	9f 4f       	sbci	r25, 0xFF	; 255
 4ec:	99 23       	and	r25, r25
 4ee:	a9 f0       	breq	.+42     	; 0x51a <__floatsisf+0x40>
 4f0:	f9 2f       	mov	r31, r25
 4f2:	96 e9       	ldi	r25, 0x96	; 150
 4f4:	bb 27       	eor	r27, r27
 4f6:	93 95       	inc	r25
 4f8:	f6 95       	lsr	r31
 4fa:	87 95       	ror	r24
 4fc:	77 95       	ror	r23
 4fe:	67 95       	ror	r22
 500:	b7 95       	ror	r27
 502:	f1 11       	cpse	r31, r1
 504:	f8 cf       	rjmp	.-16     	; 0x4f6 <__floatsisf+0x1c>
 506:	fa f4       	brpl	.+62     	; 0x546 <__floatsisf+0x6c>
 508:	bb 0f       	add	r27, r27
 50a:	11 f4       	brne	.+4      	; 0x510 <__floatsisf+0x36>
 50c:	60 ff       	sbrs	r22, 0
 50e:	1b c0       	rjmp	.+54     	; 0x546 <__floatsisf+0x6c>
 510:	6f 5f       	subi	r22, 0xFF	; 255
 512:	7f 4f       	sbci	r23, 0xFF	; 255
 514:	8f 4f       	sbci	r24, 0xFF	; 255
 516:	9f 4f       	sbci	r25, 0xFF	; 255
 518:	16 c0       	rjmp	.+44     	; 0x546 <__floatsisf+0x6c>
 51a:	88 23       	and	r24, r24
 51c:	11 f0       	breq	.+4      	; 0x522 <__floatsisf+0x48>
 51e:	96 e9       	ldi	r25, 0x96	; 150
 520:	11 c0       	rjmp	.+34     	; 0x544 <__floatsisf+0x6a>
 522:	77 23       	and	r23, r23
 524:	21 f0       	breq	.+8      	; 0x52e <__floatsisf+0x54>
 526:	9e e8       	ldi	r25, 0x8E	; 142
 528:	87 2f       	mov	r24, r23
 52a:	76 2f       	mov	r23, r22
 52c:	05 c0       	rjmp	.+10     	; 0x538 <__floatsisf+0x5e>
 52e:	66 23       	and	r22, r22
 530:	71 f0       	breq	.+28     	; 0x54e <__floatsisf+0x74>
 532:	96 e8       	ldi	r25, 0x86	; 134
 534:	86 2f       	mov	r24, r22
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	2a f0       	brmi	.+10     	; 0x546 <__floatsisf+0x6c>
 53c:	9a 95       	dec	r25
 53e:	66 0f       	add	r22, r22
 540:	77 1f       	adc	r23, r23
 542:	88 1f       	adc	r24, r24
 544:	da f7       	brpl	.-10     	; 0x53c <__floatsisf+0x62>
 546:	88 0f       	add	r24, r24
 548:	96 95       	lsr	r25
 54a:	87 95       	ror	r24
 54c:	97 f9       	bld	r25, 7
 54e:	08 95       	ret

00000550 <__fp_inf>:
 550:	97 f9       	bld	r25, 7
 552:	9f 67       	ori	r25, 0x7F	; 127
 554:	80 e8       	ldi	r24, 0x80	; 128
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	08 95       	ret

0000055c <__fp_nan>:
 55c:	9f ef       	ldi	r25, 0xFF	; 255
 55e:	80 ec       	ldi	r24, 0xC0	; 192
 560:	08 95       	ret

00000562 <__fp_pscA>:
 562:	00 24       	eor	r0, r0
 564:	0a 94       	dec	r0
 566:	16 16       	cp	r1, r22
 568:	17 06       	cpc	r1, r23
 56a:	18 06       	cpc	r1, r24
 56c:	09 06       	cpc	r0, r25
 56e:	08 95       	ret

00000570 <__fp_pscB>:
 570:	00 24       	eor	r0, r0
 572:	0a 94       	dec	r0
 574:	12 16       	cp	r1, r18
 576:	13 06       	cpc	r1, r19
 578:	14 06       	cpc	r1, r20
 57a:	05 06       	cpc	r0, r21
 57c:	08 95       	ret

0000057e <__fp_round>:
 57e:	09 2e       	mov	r0, r25
 580:	03 94       	inc	r0
 582:	00 0c       	add	r0, r0
 584:	11 f4       	brne	.+4      	; 0x58a <__fp_round+0xc>
 586:	88 23       	and	r24, r24
 588:	52 f0       	brmi	.+20     	; 0x59e <__fp_round+0x20>
 58a:	bb 0f       	add	r27, r27
 58c:	40 f4       	brcc	.+16     	; 0x59e <__fp_round+0x20>
 58e:	bf 2b       	or	r27, r31
 590:	11 f4       	brne	.+4      	; 0x596 <__fp_round+0x18>
 592:	60 ff       	sbrs	r22, 0
 594:	04 c0       	rjmp	.+8      	; 0x59e <__fp_round+0x20>
 596:	6f 5f       	subi	r22, 0xFF	; 255
 598:	7f 4f       	sbci	r23, 0xFF	; 255
 59a:	8f 4f       	sbci	r24, 0xFF	; 255
 59c:	9f 4f       	sbci	r25, 0xFF	; 255
 59e:	08 95       	ret

000005a0 <__fp_split3>:
 5a0:	57 fd       	sbrc	r21, 7
 5a2:	90 58       	subi	r25, 0x80	; 128
 5a4:	44 0f       	add	r20, r20
 5a6:	55 1f       	adc	r21, r21
 5a8:	59 f0       	breq	.+22     	; 0x5c0 <__fp_splitA+0x10>
 5aa:	5f 3f       	cpi	r21, 0xFF	; 255
 5ac:	71 f0       	breq	.+28     	; 0x5ca <__fp_splitA+0x1a>
 5ae:	47 95       	ror	r20

000005b0 <__fp_splitA>:
 5b0:	88 0f       	add	r24, r24
 5b2:	97 fb       	bst	r25, 7
 5b4:	99 1f       	adc	r25, r25
 5b6:	61 f0       	breq	.+24     	; 0x5d0 <__fp_splitA+0x20>
 5b8:	9f 3f       	cpi	r25, 0xFF	; 255
 5ba:	79 f0       	breq	.+30     	; 0x5da <__fp_splitA+0x2a>
 5bc:	87 95       	ror	r24
 5be:	08 95       	ret
 5c0:	12 16       	cp	r1, r18
 5c2:	13 06       	cpc	r1, r19
 5c4:	14 06       	cpc	r1, r20
 5c6:	55 1f       	adc	r21, r21
 5c8:	f2 cf       	rjmp	.-28     	; 0x5ae <__fp_split3+0xe>
 5ca:	46 95       	lsr	r20
 5cc:	f1 df       	rcall	.-30     	; 0x5b0 <__fp_splitA>
 5ce:	08 c0       	rjmp	.+16     	; 0x5e0 <__fp_splitA+0x30>
 5d0:	16 16       	cp	r1, r22
 5d2:	17 06       	cpc	r1, r23
 5d4:	18 06       	cpc	r1, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	f1 cf       	rjmp	.-30     	; 0x5bc <__fp_splitA+0xc>
 5da:	86 95       	lsr	r24
 5dc:	71 05       	cpc	r23, r1
 5de:	61 05       	cpc	r22, r1
 5e0:	08 94       	sec
 5e2:	08 95       	ret

000005e4 <__fp_zero>:
 5e4:	e8 94       	clt

000005e6 <__fp_szero>:
 5e6:	bb 27       	eor	r27, r27
 5e8:	66 27       	eor	r22, r22
 5ea:	77 27       	eor	r23, r23
 5ec:	cb 01       	movw	r24, r22
 5ee:	97 f9       	bld	r25, 7
 5f0:	08 95       	ret

000005f2 <__mulsf3>:
 5f2:	0b d0       	rcall	.+22     	; 0x60a <__mulsf3x>
 5f4:	c4 cf       	rjmp	.-120    	; 0x57e <__fp_round>
 5f6:	b5 df       	rcall	.-150    	; 0x562 <__fp_pscA>
 5f8:	28 f0       	brcs	.+10     	; 0x604 <__mulsf3+0x12>
 5fa:	ba df       	rcall	.-140    	; 0x570 <__fp_pscB>
 5fc:	18 f0       	brcs	.+6      	; 0x604 <__mulsf3+0x12>
 5fe:	95 23       	and	r25, r21
 600:	09 f0       	breq	.+2      	; 0x604 <__mulsf3+0x12>
 602:	a6 cf       	rjmp	.-180    	; 0x550 <__fp_inf>
 604:	ab cf       	rjmp	.-170    	; 0x55c <__fp_nan>
 606:	11 24       	eor	r1, r1
 608:	ee cf       	rjmp	.-36     	; 0x5e6 <__fp_szero>

0000060a <__mulsf3x>:
 60a:	ca df       	rcall	.-108    	; 0x5a0 <__fp_split3>
 60c:	a0 f3       	brcs	.-24     	; 0x5f6 <__mulsf3+0x4>

0000060e <__mulsf3_pse>:
 60e:	95 9f       	mul	r25, r21
 610:	d1 f3       	breq	.-12     	; 0x606 <__mulsf3+0x14>
 612:	95 0f       	add	r25, r21
 614:	50 e0       	ldi	r21, 0x00	; 0
 616:	55 1f       	adc	r21, r21
 618:	62 9f       	mul	r22, r18
 61a:	f0 01       	movw	r30, r0
 61c:	72 9f       	mul	r23, r18
 61e:	bb 27       	eor	r27, r27
 620:	f0 0d       	add	r31, r0
 622:	b1 1d       	adc	r27, r1
 624:	63 9f       	mul	r22, r19
 626:	aa 27       	eor	r26, r26
 628:	f0 0d       	add	r31, r0
 62a:	b1 1d       	adc	r27, r1
 62c:	aa 1f       	adc	r26, r26
 62e:	64 9f       	mul	r22, r20
 630:	66 27       	eor	r22, r22
 632:	b0 0d       	add	r27, r0
 634:	a1 1d       	adc	r26, r1
 636:	66 1f       	adc	r22, r22
 638:	82 9f       	mul	r24, r18
 63a:	22 27       	eor	r18, r18
 63c:	b0 0d       	add	r27, r0
 63e:	a1 1d       	adc	r26, r1
 640:	62 1f       	adc	r22, r18
 642:	73 9f       	mul	r23, r19
 644:	b0 0d       	add	r27, r0
 646:	a1 1d       	adc	r26, r1
 648:	62 1f       	adc	r22, r18
 64a:	83 9f       	mul	r24, r19
 64c:	a0 0d       	add	r26, r0
 64e:	61 1d       	adc	r22, r1
 650:	22 1f       	adc	r18, r18
 652:	74 9f       	mul	r23, r20
 654:	33 27       	eor	r19, r19
 656:	a0 0d       	add	r26, r0
 658:	61 1d       	adc	r22, r1
 65a:	23 1f       	adc	r18, r19
 65c:	84 9f       	mul	r24, r20
 65e:	60 0d       	add	r22, r0
 660:	21 1d       	adc	r18, r1
 662:	82 2f       	mov	r24, r18
 664:	76 2f       	mov	r23, r22
 666:	6a 2f       	mov	r22, r26
 668:	11 24       	eor	r1, r1
 66a:	9f 57       	subi	r25, 0x7F	; 127
 66c:	50 40       	sbci	r21, 0x00	; 0
 66e:	8a f0       	brmi	.+34     	; 0x692 <__mulsf3_pse+0x84>
 670:	e1 f0       	breq	.+56     	; 0x6aa <__mulsf3_pse+0x9c>
 672:	88 23       	and	r24, r24
 674:	4a f0       	brmi	.+18     	; 0x688 <__mulsf3_pse+0x7a>
 676:	ee 0f       	add	r30, r30
 678:	ff 1f       	adc	r31, r31
 67a:	bb 1f       	adc	r27, r27
 67c:	66 1f       	adc	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	91 50       	subi	r25, 0x01	; 1
 684:	50 40       	sbci	r21, 0x00	; 0
 686:	a9 f7       	brne	.-22     	; 0x672 <__mulsf3_pse+0x64>
 688:	9e 3f       	cpi	r25, 0xFE	; 254
 68a:	51 05       	cpc	r21, r1
 68c:	70 f0       	brcs	.+28     	; 0x6aa <__mulsf3_pse+0x9c>
 68e:	60 cf       	rjmp	.-320    	; 0x550 <__fp_inf>
 690:	aa cf       	rjmp	.-172    	; 0x5e6 <__fp_szero>
 692:	5f 3f       	cpi	r21, 0xFF	; 255
 694:	ec f3       	brlt	.-6      	; 0x690 <__mulsf3_pse+0x82>
 696:	98 3e       	cpi	r25, 0xE8	; 232
 698:	dc f3       	brlt	.-10     	; 0x690 <__mulsf3_pse+0x82>
 69a:	86 95       	lsr	r24
 69c:	77 95       	ror	r23
 69e:	67 95       	ror	r22
 6a0:	b7 95       	ror	r27
 6a2:	f7 95       	ror	r31
 6a4:	e7 95       	ror	r30
 6a6:	9f 5f       	subi	r25, 0xFF	; 255
 6a8:	c1 f7       	brne	.-16     	; 0x69a <__mulsf3_pse+0x8c>
 6aa:	fe 2b       	or	r31, r30
 6ac:	88 0f       	add	r24, r24
 6ae:	91 1d       	adc	r25, r1
 6b0:	96 95       	lsr	r25
 6b2:	87 95       	ror	r24
 6b4:	97 f9       	bld	r25, 7
 6b6:	08 95       	ret

000006b8 <__umulhisi3>:
 6b8:	a2 9f       	mul	r26, r18
 6ba:	b0 01       	movw	r22, r0
 6bc:	b3 9f       	mul	r27, r19
 6be:	c0 01       	movw	r24, r0
 6c0:	a3 9f       	mul	r26, r19
 6c2:	01 d0       	rcall	.+2      	; 0x6c6 <__umulhisi3+0xe>
 6c4:	b2 9f       	mul	r27, r18
 6c6:	70 0d       	add	r23, r0
 6c8:	81 1d       	adc	r24, r1
 6ca:	11 24       	eor	r1, r1
 6cc:	91 1d       	adc	r25, r1
 6ce:	08 95       	ret

000006d0 <_exit>:
 6d0:	f8 94       	cli

000006d2 <__stop_program>:
 6d2:	ff cf       	rjmp	.-2      	; 0x6d2 <__stop_program>
